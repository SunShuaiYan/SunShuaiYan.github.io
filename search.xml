<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/06/11/hello-world/"/>
      <url>/2020/06/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day01学习笔记</title>
      <link href="/1970/01/01/day01-xue-xi-bi-ji/"/>
      <url>/1970/01/01/day01-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Day01学习笔记–初始java"><a href="#Day01学习笔记–初始java" class="headerlink" title="Day01学习笔记–初始java"></a>Day01学习笔记–初始java</h1><h2 id="知识点1：Java基础的目录结构"><a href="#知识点1：Java基础的目录结构" class="headerlink" title="知识点1：Java基础的目录结构"></a>知识点1：Java基础的目录结构</h2><p><img src="assets/1592811810554.png" alt="1592811810554"></p><h2 id="知识点2：Java语言介绍"><a href="#知识点2：Java语言介绍" class="headerlink" title="知识点2：Java语言介绍"></a>知识点2：Java语言介绍</h2><h3 id="1-人机交互方式"><a href="#1-人机交互方式" class="headerlink" title="1. 人机交互方式"></a>1. 人机交互方式</h3><p><img src="assets/1592811918936.png" alt="1592811918936"></p><h3 id="2-常用的dos命令"><a href="#2-常用的dos命令" class="headerlink" title="2. 常用的dos命令"></a>2. 常用的dos命令</h3><p><img src="assets/1592811956548.png" alt="1592811956548"></p><p><img src="assets/1592811969113.png" alt="1592811969113"></p><h3 id="3-计算机编程语言的分代"><a href="#3-计算机编程语言的分代" class="headerlink" title="3. 计算机编程语言的分代"></a>3. 计算机编程语言的分代</h3><p>第一代：机器语言</p><p>第二代：汇编语言</p><p>第三代：高级语言</p><pre><code>&gt; 面向过程的语言：C、Pascal、Fortran面向过程的语言&gt;&gt; 面向对象的语言：Java 、C# 、Scala 、 Python</code></pre><h3 id="4-Java的历史"><a href="#4-Java的历史" class="headerlink" title="4. Java的历史"></a>4. Java的历史</h3><pre><code>1991年 Green项目，开发语言最初命名为Oak (橡树)1994年，开发组意识到Oak 非常适合于互联网1996年，发布JDK 1.0，约8.3万个网页应用Java技术来制作1997年，发布JDK 1.1，JavaOne会议召开，创当时全球同类会议规模之最1998年，发布JDK 1.2，同年发布企业平台J2EE1999年，Java分成J2SE、J2EE和J2ME，JSP/Servlet技术诞生2004年，发布里程碑式版本：JDK 1.5，为突出此版本的重要性，更名为JDK 5.02005年，J2SE -&gt; JavaSE，J2EE -&gt; JavaEE，J2ME -&gt; JavaME2009年，Oracle公司收购SUN，交易价格74亿美元2011年，发布JDK 7.02014年，发布JDK 8.0，是继JDK 5.0以来变化最大的版本2017年，发布JDK 9.0，最大限度实现模块化2018年3月，发布JDK 10.0，版本号也称为18.32018年9月，发布JDK 11.0，版本号也称为18.9</code></pre><h3 id="5-Java技术平台的划分"><a href="#5-Java技术平台的划分" class="headerlink" title="5. Java技术平台的划分"></a>5. Java技术平台的划分</h3><p><img src="assets/1592812159407.png" alt="1592812159407"></p><h3 id="6-主要的应用场景"><a href="#6-主要的应用场景" class="headerlink" title="6. 主要的应用场景"></a>6. 主要的应用场景</h3><pre><code>企业级应用：主要指复杂的大企业的软件系统、各种类型的网站。Java的安全机制以及它的跨平台的优势，使它在分布式系统领域开发中有广泛应用。应用领域包括金融、电信、交通、电子商务等。Android平台应用：Android应用程序使用Java语言编写。Android开发水平的高低很大程度上取决于Java语言核心能力是否扎实。大数据平台开发：各类框架有Hadoop，spark，storm，flink等，就这类技术生态圈来讲，还有各种中间件如flume，kafka，sqoop等等 ，这些框架以及工具大多数是用Java编写而成，但提供诸如Java，scala，Python，R等各种语言API供编程。移动领域应用：主要表现在消费和嵌入式领域，是指在各种小型设备上的应用，包括手机、PDA、机顶盒、汽车通信设备等。</code></pre><h3 id="7-Java语言的特点"><a href="#7-Java语言的特点" class="headerlink" title="7. Java语言的特点"></a>7. Java语言的特点</h3><ul><li><p>面向对象性</p></li><li><p>健壮性</p><ul><li>去除了C/C++中的指针</li><li>提供了自动的内存管理机制（内存的自动申请和释放）</li></ul></li><li><p>跨平台性</p><ul><li>write once , run anywhere</li><li>之所以能实现一次编译，到处运行，归功于：JVM</li></ul></li></ul><p><img src="assets/1592812303809.png" alt="1592812303809"></p><blockquote><p>Java程序还会出现内存泄漏和内存溢出问题吗？  Yes!</p></blockquote><h2 id="知识点3：环境的搭建"><a href="#知识点3：环境的搭建" class="headerlink" title="知识点3：环境的搭建"></a>知识点3：环境的搭建</h2><h3 id="1-JDK、JRE、JVM的关系"><a href="#1-JDK、JRE、JVM的关系" class="headerlink" title="1. JDK、JRE、JVM的关系"></a>1. JDK、JRE、JVM的关系</h3><p><img src="assets/1592812393570.png" alt="1592812393570"></p><pre><code>JDK(Java Development Kit    Java开发工具包)JRE(Java Runtime Environment    Java运行环境) JVM(Java Virtual Machine   Java虚拟机)</code></pre><h3 id="2-下载、安装JDK"><a href="#2-下载、安装JDK" class="headerlink" title="2. 下载、安装JDK"></a>2. 下载、安装JDK</h3><p>傻瓜式安装</p><h3 id="3-JDK的安装后的路径"><a href="#3-JDK的安装后的路径" class="headerlink" title="3. JDK的安装后的路径"></a>3. JDK的安装后的路径</h3><p><img src="assets/1592812498597.png" alt="1592812498597"></p><blockquote><p>bin：存放java的相关可执行行的命令。比如：javac、java、javadoc、jstack、jmap、jmc、javap、jvirtual 等</p><p>include：存放c数据头。java底层是使用C语言编写的</p><p>lib：相关可执行性命令对应的一些jar文件等</p><p>src.zip：存放java的源代码</p></blockquote><h3 id="4-配置环境变量"><a href="#4-配置环境变量" class="headerlink" title="4. 配置环境变量"></a>4. 配置环境变量</h3><p><img src="assets/1592812639135.png" alt="1592812639135"></p><h2 id="知识点4：HelloWorld"><a href="#知识点4：HelloWorld" class="headerlink" title="知识点4：HelloWorld"></a>知识点4：HelloWorld</h2><h3 id="1-编写程序"><a href="#1-编写程序" class="headerlink" title="1. 编写程序"></a>1. 编写程序</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">HelloChina</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//args: arguments 参数</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello,China!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello,China!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">123</span> <span class="token operator">*</span> <span class="token number">71</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-执行过程"><a href="#2-执行过程" class="headerlink" title="2.执行过程"></a>2.执行过程</h3><p><img src="assets/1592812707191.png" alt="1592812707191"></p><blockquote><p>1.将 Java 代码<strong>编写</strong>到扩展名为 .java 的文件中。</p><p>2.通过 javac 命令对该 java 文件进行<strong>编译</strong>。</p><p>3.通过 java 命令对生成的 class 文件进行<strong>运行</strong>。</p></blockquote><h3 id="3-常见的错误"><a href="#3-常见的错误" class="headerlink" title="3. 常见的错误"></a>3. 常见的错误</h3><ul><li><p>编译或运行时的文件名不对</p></li><li><p>代码中{}成对出现</p></li><li><p>main()的格式是固定的：public static void main(String[] args) 或 public static void main(String args[])</p></li><li><p>每一行执行语句最后以;结尾！！</p></li></ul><h2 id="知识点5：注释"><a href="#知识点5：注释" class="headerlink" title="知识点5：注释"></a>知识点5：注释</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*Java有三种注释信息：方式一：单行注释   //方式二：多行注释   1.单行注释和多行注释的作用：① 对程序中的变量、执行流程、方法等进行解释说明② 用于程序的调试2. 单行注释和多行注释的特点：编译之后生成的字节码文件中，不包含当行注释和多行注释注释掉的信息。3. 多行注释不可以嵌套使用方式三：文档注释（java特有）作用：注释内容可以被JDK提供的工具 javadoc 所解析，生成一套以网页文件形式体现的该程序的说明文档。*/</span><span class="token comment" spellcheck="true">/**文档注释信息：@author shkstart@version 1.0@date 2020-6-22这是我的第一个java程序！感觉很不错！！*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestComment</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*    这是程序的入口    格式是固定的！    */</span>    <span class="token comment" spellcheck="true">/**    这是main()方法，作为程序的入口    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//args : arguments的缩写</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//print():输出内部的数据即可</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//println():输出内部的数据之后，换行</span>        <span class="token comment" spellcheck="true">//System.out.println("Hello World!")</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如何生成javadoc对应的文档？</p><p><img src="assets/1592812916322.png" alt="1592812916322"></p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p><strong>1. 编写-编译-运行的过程：</strong></p><ul><li>编写一个java文件，名为：HelloWorld.java</li></ul><p>内容为：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">HelloChina</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello,China!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>编译：javac HelloWorld.java</li></ul><p>​    生成HelloChina.class文件</p><ul><li>运行：java HelloChina </li></ul><p><strong>2. 一个java源文件中可以编写多个java类。编译之后，会生成多个以类名命名的字节码文件</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">HelloShangHai</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SongJiang</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><img src="assets/1592813330208.png" alt="1592813330208"></p><p><strong>3. 一个java源文件中，最多只能有一个类声明为public的。且此类的类名，必须有java源文件名相同</strong></p><p><strong>4. java语言严格区分大小写</strong></p><h2 id="知识点6：关键字和保留字"><a href="#知识点6：关键字和保留字" class="headerlink" title="知识点6：关键字和保留字"></a>知识点6：关键字和保留字</h2><pre><code>关键字(keyword)的定义和特点定义：被Java语言赋予了特殊含义，用做专门用途的字符串（单词）特点：关键字中所有字母都为小写</code></pre><p><img src="assets/1592816716644.png" alt="1592816716644"></p><p><img src="assets/1592816725113.png" alt="1592816725113"></p><pre><code>Java保留字：现有Java版本尚未使用，但以后版本可能会作为关键字使用。自己命名标识符时要避免使用这些保留字 比如：goto 、const</code></pre><h2 id="知识点7：标识符"><a href="#知识点7：标识符" class="headerlink" title="知识点7：标识符"></a>知识点7：标识符</h2><ul><li>概念</li></ul><pre><code>1. java中定义的变量名、方法名、类名、接口名、常量名、包名等都是标识符2. 技巧：凡是可以自己命名的地方，都是标识符</code></pre><ul><li>命名规则</li></ul><pre><code>3. 定义合法标识符规则：&gt; 由26个英文字母大小写，0-9 ，_或 $ 组成  &gt; 数字不可以开头。&gt; 不可以使用关键字和保留字，但能包含关键字和保留字。&gt; Java中严格区分大小写，长度无限制。&gt; 标识符不能包含空格。小结：凡是不满足上述规则的命名，都会报编译的错误！</code></pre><ul><li>命名规范</li></ul><pre><code>4. 标识符命名规范：包名：多单词组成时所有字母都小写：xxxyyyzzz类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz   （大驼峰）变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz  （小驼峰）常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ小结：如果不满足上述的规范，编译、运行仍可正常执行。      要求大家在开发时，要遵循上述的规范！</code></pre><ul><li>注意点</li></ul><pre><code>5. 给标识符命名时，要见名知意。</code></pre><ul><li>对应的代码测试</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">IdentifierTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">_8hello1</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">public1</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Goto</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Ren</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">staticvoid</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Hello123</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*class hello123{}*/</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day05授课笔记</title>
      <link href="/1970/01/01/day05-shou-ke-bi-ji/"/>
      <url>/1970/01/01/day05-shou-ke-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Day05学习笔记–面向对象"><a href="#Day05学习笔记–面向对象" class="headerlink" title="Day05学习笔记–面向对象"></a>Day05学习笔记–面向对象</h1><h2 id="知识点1：面向对象的理解"><a href="#知识点1：面向对象的理解" class="headerlink" title="知识点1：面向对象的理解"></a>知识点1：面向对象的理解</h2><h3 id="1-面向过程-vs-面向对象"><a href="#1-面向过程-vs-面向对象" class="headerlink" title="1. 面向过程  vs  面向对象"></a>1. 面向过程  vs  面向对象</h3><p>二者都是一种思想，面向对象是相对于面向过程而言的。<strong>面向过程，强调的是功能行为，以函数为最小单位</strong>，考虑怎么做。面向对象，将功能封装进对象，<strong>强调具备了功能的对象</strong>，以类/对象为最小单位，考虑谁来做。</p><hr><h3 id="2-类与对象的理解"><a href="#2-类与对象的理解" class="headerlink" title="2. 类与对象的理解"></a>2. 类与对象的理解</h3><pre><code>面向对象中的两大核心概念* 1. 类（class）：对一类事物的描述，是抽象的、概念上的定义。* 2. 对象（object\instance）：由类派生(new)出的一个个的实体。</code></pre><p><img src="assets/1593507543274.png" alt="1593507543274"></p><h3 id="3-学习的三条主线"><a href="#3-学习的三条主线" class="headerlink" title="3. 学习的三条主线"></a>3. 学习的三条主线</h3><pre><code>面向对象编程的学习三条主线：* 1. 类及类中的成员：属性、方法、构造器；内部类、代码块* 2. 面向对象的三个特征：封装、继承、多态、（抽象）* 3. 其它关键字的使用：this\super\import\package\static\final\abstract\interface\....</code></pre><p>说明：</p><pre><code>类的内部成员：*   属性 = 成员变量 = field*   方法 = 成员方法 = (成员)函数 = method</code></pre><h2 id="知识点2：类及对象的创建过程"><a href="#知识点2：类及对象的创建过程" class="headerlink" title="知识点2：类及对象的创建过程"></a>知识点2：类及对象的创建过程</h2><pre><code>* 1. 设计类，就是设计类的内部成员。。** 2. 设计类、创建对象、调用功能的步骤：* 第1步：创建类（实际上，就是创建类的成员:属性、方法）* 第2步：创建类的对象 （或 创建类的实例、类的实例化）* 第3步：通过"对象.属性"或"对象.方法"的方式，调用对象的内部结构</code></pre><ul><li>代码说明</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneTest</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//测试类</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//数据类型  变量名 = 变量值</span>        Scanner scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        int number = scan.nextInt();</span>        <span class="token comment" spellcheck="true">//创建Phone类的对象</span>        Phone iphone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过"对象.属性"或"对象.方法"的方式，调用对象的内部结构</span>        iphone<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"苹果手机"</span><span class="token punctuation">;</span>        iphone<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">8999</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name:"</span> <span class="token operator">+</span> iphone<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">", price:"</span> <span class="token operator">+</span> iphone<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        iphone<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iphone<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">"有内鬼，停止交易！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String info <span class="token operator">=</span> iphone<span class="token punctuation">.</span><span class="token function">takePhoto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//##################</span>        Phone iphone1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iphone1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"华为P40 pro"</span><span class="token punctuation">;</span>        iphone1<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">4999</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name:"</span> <span class="token operator">+</span> iphone1<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">", price:"</span> <span class="token operator">+</span> iphone1<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name:"</span> <span class="token operator">+</span> iphone<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">", price:"</span> <span class="token operator">+</span> iphone<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//##################</span>        Phone iphone2 <span class="token operator">=</span> iphone<span class="token punctuation">;</span>        iphone2<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">6999</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name:"</span> <span class="token operator">+</span> iphone<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">", price:"</span> <span class="token operator">+</span> iphone<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//##############</span>        iphone<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">"你好！很高兴认识你"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1. 设计属性</span>    String name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//手机名称</span>    <span class="token keyword">int</span> price<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//价格</span>    <span class="token comment" spellcheck="true">//2. 设计方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"手机可以拨打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送信息："</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">takePhoto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//System.out.println("拍照");</span>        <span class="token keyword">return</span> <span class="token string">"拍照成功"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>内存解析：</p><p><img src="assets/1593507688267.png" alt="1593507688267"></p><pre><code>如果创建了类的多个对象，则每个对象拥有一套类的属性。当我们修改其中一个对象的属性时，不影响其它对象* 此属性的值。**  如果将对象引用p1赋给新的变量p2，则p1和p2就共同指向了堆空间中唯一的一个对象实体。当我们通过其中一个引用*  修改对象的属性的话，则会导致另外引用对同一个属性的值的调用。</code></pre><h2 id="知识点3：成员变量vs局部变量"><a href="#知识点3：成员变量vs局部变量" class="headerlink" title="知识点3：成员变量vs局部变量"></a>知识点3：成员变量vs局部变量</h2><pre><code>测试类中属性的定义** 1. 回顾：变量的分类* ① 按照数据类型来分： 基本数据类型（8种）  vs  引用数据类型（类、数组、接口）** ② 按照类中声明的位置： 成员变量（或属性）   vs  局部变量*   说明：成员变量：在类中直接定义的变量*        局部变量：在方法内、构造器内、代码块内等定义的变量** 2.  成员变量（或属性）   vs  局部变量* 相同点：*       1. 变量声明的格式相同：数据类型 变量名 = 变量值*       2. 凡是变量，都需要先声明，后使用*       3. 都有其作用域。超出作用域，不可调用** 不同点：*      1. 声明位置的不同。*          &gt; 成员变量：在类中直接定义的变量*          &gt; 局部变量：在方法内、构造器内、代码块内等定义的变量*      2. 是否可以使用权限修饰符进行修饰。*          &gt; 权限修饰符有：private \ 缺省 \ protected \ public*          &gt; 成员变量可以使用权限修饰符进行修饰 ；*            局部变量不可以使用权限修饰符进行修饰*          &gt; 暂时，我们在定义成员变量时，大家都使用缺省即可。（讲封装性时再说）*      3. 是否有默认初始化值的情况*          &gt; 成员变量都有默认初始化值*                  ① 如果成员变量是整型(byte\short\int\long)，则默认值为：0*                  ② 如果成员变量是浮点型(float \ double)，则默认值为：0.0*                  ③ 如果成员变量是boolean型，则默认值为：false*                  ④ 如果成员变量是char型，则默认值为：0 或 '\u0000'*                  ⑤ 如果成员变量是引用数据类型，则默认值为：null**          &gt; 局部变量都没有默认初始化值。则意味着在调用局部变量之前，一定要显式的赋值。**      4. 在内存中存储的位置不同*          &gt;成员变量存储在堆空间中*          &gt;局部变量存储在栈空间中** @author shkstart* @create 2020-06-30 16:19*/</code></pre><ul><li>代码演示</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name <span class="token operator">+</span><span class="token string">","</span> <span class="token operator">+</span> p1<span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> p1<span class="token punctuation">.</span>gender<span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"湖南臭豆腐"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//声明成员变量(属性)</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> gender<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//性别</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> hour <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//局部变量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人每天应该至少保证"</span> <span class="token operator">+</span> hour <span class="token operator">+</span> <span class="token string">"小时的睡眠"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span>String food<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//food:局部变量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我喜欢吃："</span> <span class="token operator">+</span> food<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="知识点4：方法的声明"><a href="#知识点4：方法的声明" class="headerlink" title="知识点4：方法的声明"></a>知识点4：方法的声明</h2><pre class=" language-java"><code class="language-java"><span class="token operator">*</span> 类中方法的声明测试 <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">.</span> 之前用过的一些方法： <span class="token operator">*</span>  Scanner类的<span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \ <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>  Math类的<span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \ <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token keyword">double</span> d<span class="token punctuation">)</span> <span class="token operator">*</span>  Arrays类的<span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2<span class="token punctuation">)</span> \ <span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> \ <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token operator">*</span>           \ <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">.</span> 类中方法声明的格式： <span class="token operator">*</span>   权限修饰符  返回值类型  方法名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">*</span>          方法体 <span class="token operator">*</span>   <span class="token punctuation">}</span> <span class="token operator">*</span>   说明：关于方法中的特殊关键字：<span class="token keyword">static</span>\<span class="token keyword">final</span>\<span class="token keyword">abstract</span>\<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>暂时先不考虑。 <span class="token operator">*</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">.</span> 方法声明的详细说明： <span class="token operator">*</span>   <span class="token number">3.1</span> 权限修饰符：指名当前方法被调用权限的大小。 <span class="token operator">*</span>       涉及到的权限修饰符有：<span class="token keyword">private</span> 、 缺省 、 <span class="token keyword">protected</span> 、 <span class="token keyword">public</span>。 详细细节见《封装性》 <span class="token operator">*</span>       目前，大家在声明方法时，默认使用<span class="token keyword">public</span>即可。 <span class="token operator">*</span>   <span class="token number">3.2</span>  返回值类型 ： <span class="token operator">*</span>       <span class="token operator">></span> 可以分为：有具体的返回值类型  vs  没有返回值类型：<span class="token keyword">void</span> <span class="token operator">*</span>       <span class="token operator">></span> 有具体的返回值类型，可以使用任何的变量类型。比如：基本数据类型、引用数据类型 <span class="token operator">*</span>       <span class="token operator">></span> 有具体的返回值类型的方法，在调用方法结束后，一定要返回满足要求的返回值类型的变量或常量 <span class="token operator">*</span>     补充：<span class="token keyword">return</span>的使用： <span class="token operator">*</span>         在有具体返回值类型的方法中，一定需要使用“<span class="token keyword">return</span> <span class="token operator">+</span> 变量<span class="token operator">/</span>常量”的方法给方法返回指定的数据。 <span class="token operator">*</span>         如果方法没有返回值类型，也可以使用<span class="token string">"return;"</span>结构，表示结束当前方法的执行。 <span class="token operator">*</span> <span class="token operator">*</span>    <span class="token number">3.3</span> 方法名：属于标识符，命名时满足标识符命名的规则和规范。“见名知意” <span class="token operator">*</span>    <span class="token number">3.4</span> 形参列表： <span class="token operator">*</span>      格式：参数类型<span class="token number">1</span> 参数名<span class="token number">1</span><span class="token punctuation">,</span>参数类型<span class="token number">2</span><span class="token punctuation">,</span>参数名<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">*</span>      方法在声明时，不要给形参列表的变量赋值。当我们调用方法时，才给形参列表赋值：实参。 <span class="token operator">*</span>    <span class="token number">3.5</span> 方法体：执行方法时，主要操作的逻辑。  <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">.</span> 如何确定定义一个方法时，要不要声明返回值类型？要不要声明形参？ <span class="token operator">*</span>    ① 看题目要求。 <span class="token operator">*</span>    ② 具体问题具体分析。</code></pre><ul><li>代码演示</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">printNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> hour <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>hour<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"##############"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    Account acct<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于结束方法</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Account <span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        return age;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">int</span> hour<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"昨天睡了"</span> <span class="token operator">+</span> hour <span class="token operator">+</span> <span class="token string">"小时"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人需要吃饭，补充营养"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name = "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        eat();</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Account</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//账户</span><span class="token punctuation">}</span></code></pre><ul><li>补充说明</li></ul><pre><code> * 5. &gt; 可以在当前类的方法中使用当前类定义的属性或其他的方法 *    &gt; 方法内不能定义新的方法。</code></pre><ul><li>课后练习</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 2.利用面向对象的编程方法，设计类Circle计算圆的面积。 * * @author shkstart * @create 2020-07-01 11:37 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CircleTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Circle c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span>radius <span class="token operator">=</span> <span class="token number">1.2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对应方式一</span><span class="token comment" spellcheck="true">//        double area = c1.findArea();</span><span class="token comment" spellcheck="true">//        System.out.println("圆的半径为：" + c1.radius + ",面积为：" + area);</span>        <span class="token comment" spellcheck="true">//对应方式二：</span>        c1<span class="token punctuation">.</span><span class="token function">findArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Circle</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//圆</span>    <span class="token keyword">double</span> radius<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//半径</span>    <span class="token comment" spellcheck="true">//求圆的面积的方法</span>    <span class="token comment" spellcheck="true">//方式一：</span><span class="token comment" spellcheck="true">//    public double findArea(){</span><span class="token comment" spellcheck="true">//        return Math.PI * radius * radius;</span><span class="token comment" spellcheck="true">//    }</span>    <span class="token comment" spellcheck="true">//方式二：</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>PI <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//错误的：</span><span class="token comment" spellcheck="true">//    public double findArea(double r){</span><span class="token comment" spellcheck="true">//        return Math.PI * r * r;</span><span class="token comment" spellcheck="true">//    }</span><span class="token punctuation">}</span></code></pre><h2 id="知识点5：方法的重载"><a href="#知识点5：方法的重载" class="headerlink" title="知识点5：方法的重载"></a>知识点5：方法的重载</h2><ul><li>概念的理解</li></ul><pre><code> * 1. 什么是方法的重载？同一个类中，相同方法名，不同参数列表的方法之间构成重载。 * *   “两同一不同”：同一个类，相同方法名；参数个数 或 参数类型不同 * * 2. 方法的重载与权限修饰符、返回值类型、形参名没有关系！</code></pre><ul><li>代码演示</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OverLoadTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        OverLoadTest test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OverLoadTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"萨瓦迪卡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span>String info<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>String info<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span>String info<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    public void show(String info1,int j){</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//    }</span><span class="token comment" spellcheck="true">//    public String show(String info,int i){</span><span class="token comment" spellcheck="true">//          return info + i;</span><span class="token comment" spellcheck="true">//    }</span><span class="token punctuation">}</span></code></pre><ul><li>重点</li></ul><pre><code>* 3. 我们在调用类中的方法时，是如何确定调用的是某一个确定的方法呢？ *    通过方法名确定  ---&gt; 进一步通过形参列表确定</code></pre><h2 id="知识点6：可变形参的方法"><a href="#知识点6：可变形参的方法" class="headerlink" title="知识点6：可变形参的方法"></a>知识点6：可变形参的方法</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *  可变形参方法的使用 * *  1. JDK5.0新增的特性。 *  2. 格式为：形参类型 ... 形参名 *  3. 当调用可变形参的方法时，实参可以为0个，1个，2个，。。。 *  4. 可变形参的方法与方法同名的其他方法之间构成重载（排除第5点) *  5. 一个类中，不能同时出现可变形参的方法 和 与其方法名相同且可变形参类型相同的数组的方法。 *  6. 如果一个方法中声明有可变形参，则可变形参一定声明在方法参数的最后。 *  7. 一个方法的形参中，最多声明一个可变个数的形参结构。 * * * @author shkstart * @create 2020-07-01 14:59 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArgsTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        int[] arr = new int[0];</span>        ArgsTest test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArgsTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        test.show();</span><span class="token comment" spellcheck="true">//        test.show("abc");</span>        test<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">,</span><span class="token string">"xyz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>        test<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token string">"def"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show(String s)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show(int i)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span>String <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> info<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show(String ... info)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> info<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>info<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    public void show(String[] info){</span><span class="token comment" spellcheck="true">//          for(int i = 0;i &lt; info.length;i++){</span><span class="token comment" spellcheck="true">//                System.out.println(info[i]);</span><span class="token comment" spellcheck="true">//          }</span><span class="token comment" spellcheck="true">//    }</span>    <span class="token comment" spellcheck="true">//错误的</span><span class="token comment" spellcheck="true">//    public void show(String ... info,String i){</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//    }</span><span class="token punctuation">}</span></code></pre><h2 id="知识点7：方法参数的值传递机制-重难点"><a href="#知识点7：方法参数的值传递机制-重难点" class="headerlink" title="知识点7：方法参数的值传递机制(重难点)"></a>知识点7：方法参数的值传递机制(重难点)</h2><h3 id="1-变量的传递机制："><a href="#1-变量的传递机制：" class="headerlink" title="1. 变量的传递机制："></a>1. 变量的传递机制：</h3><pre><code>*  1. 如果传递的是基本数据类型的变量，则将变量本身保存的数据值传递过去*  2. 如果传递的是引用数据类型的变量，则将变量本身保存的地址值传递过去</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VariableTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对于基本数据类型变量来说：</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> m<span class="token punctuation">;</span>        n <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m = "</span> <span class="token operator">+</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10</span>        <span class="token comment" spellcheck="true">//对于引用数据类型变量来说：</span>        Order o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        o1<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//</span>        Order o2 <span class="token operator">=</span> o1<span class="token punctuation">;</span>        o2<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"o1.num = "</span> <span class="token operator">+</span> o1<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array2 <span class="token operator">=</span> array1<span class="token punctuation">;</span>        array2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Order</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-方法形参的值传递机制"><a href="#2-方法形参的值传递机制" class="headerlink" title="2. 方法形参的值传递机制"></a>2. 方法形参的值传递机制</h3><pre><code>*  1. 形参：方法声明时，小括号内的参数。*     实参：方法调用时，实际传递给形参的数据**  2. 如果方法的形参是基本数据类型的变量，则将实参保存的数据值传递给形参变量。*     如果方法的形参是引用数据类型的变量，则将实参保存的地址值传递给形参变量。</code></pre><ul><li>基本数据类型</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValueTransferTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m = "</span> <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token string">", n = "</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//交换两个变量的值</span><span class="token comment" spellcheck="true">//        int temp = m;</span><span class="token comment" spellcheck="true">//        m = n;</span><span class="token comment" spellcheck="true">//        n = temp;</span>        ValueTransferTest test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ValueTransferTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m = "</span> <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token string">", n = "</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> m<span class="token punctuation">;</span>        m <span class="token operator">=</span> n<span class="token punctuation">;</span>        n <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>对应图示：</p><p><img src="/Users/mymac/Desktop/Java/2_%E6%AF%8F%E6%97%A5%E7%AC%94%E8%AE%B0/assets/1593593444278.png" alt="1593593444278"></p><ul><li>引用数据类型</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValueTransferTest1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Data data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token punctuation">.</span>m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        data<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m = "</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>m <span class="token operator">+</span><span class="token string">", n = "</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//交换的操作</span>        ValueTransferTest1 test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ValueTransferTest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m = "</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>m <span class="token operator">+</span><span class="token string">", n = "</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//com.atguigu.java1.Data@1540e19d</span><span class="token comment" spellcheck="true">//        User user = data;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>Data data1<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> data1<span class="token punctuation">.</span>m <span class="token punctuation">;</span>        data1<span class="token punctuation">.</span>m <span class="token operator">=</span> data1<span class="token punctuation">.</span>n<span class="token punctuation">;</span>        data1<span class="token punctuation">.</span>n <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Data</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m <span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>对应图示：</p><p><img src="/Users/mymac/Desktop/Java/2_%E6%AF%8F%E6%97%A5%E7%AC%94%E8%AE%B0/assets/1593593479742.png" alt="1593593479742"></p><h3 id="3-练习1"><a href="#3-练习1" class="headerlink" title="3. 练习1"></a>3. 练习1</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author shkstart * @create 2020-07-01 16:23 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValueTransferTest2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ValueTransferTest2 test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ValueTransferTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token string">"ascend"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> String sortMethod<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"ascend"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>sortMethod<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//从小到大</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//最初的写法：正确</span><span class="token comment" spellcheck="true">//                        int temp = arr[j];</span><span class="token comment" spellcheck="true">//                        arr[j] = arr[j + 1];</span><span class="token comment" spellcheck="true">//                        arr[j + 1] = temp;</span>                        <span class="token comment" spellcheck="true">//错误的写法</span><span class="token comment" spellcheck="true">//                        swap(arr[j], arr[j + 1]);</span>                        <span class="token comment" spellcheck="true">//正确的写法</span>                        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>j<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"descend"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>sortMethod<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//从大到小</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//最初的写法：正确</span><span class="token comment" spellcheck="true">//                        int temp = arr[j];</span><span class="token comment" spellcheck="true">//                        arr[j] = arr[j + 1];</span><span class="token comment" spellcheck="true">//                        arr[j + 1] = temp;</span>                        <span class="token comment" spellcheck="true">//错误的写法</span><span class="token comment" spellcheck="true">//                        swap(arr[j], arr[j + 1]);</span>                        <span class="token comment" spellcheck="true">//正确的写法</span>                        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>j<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序方式错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    public void swap(int i,int j){</span><span class="token comment" spellcheck="true">//        int temp = i;</span><span class="token comment" spellcheck="true">//        i = j;</span><span class="token comment" spellcheck="true">//        j = temp;</span><span class="token comment" spellcheck="true">//    }</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-练习2："><a href="#4-练习2：" class="headerlink" title="4.练习2："></a>4.练习2：</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransferTest3</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        TransferTest3 test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransferTest3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        Value v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v<span class="token punctuation">.</span>i <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>        <span class="token function">second</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">second</span><span class="token punctuation">(</span>Value v<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        v<span class="token punctuation">.</span>i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        Value val <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v <span class="token operator">=</span> val<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>i <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Value</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>对应的图示：</p><p><img src="/Users/mymac/Desktop/Java/2_%E6%AF%8F%E6%97%A5%E7%AC%94%E8%AE%B0/assets/1593593604769.png" alt="1593593604769"></p><h2 id="补充内容："><a href="#补充内容：" class="headerlink" title="补充内容："></a>补充内容：</h2><h3 id="NullPointerException的理解"><a href="#NullPointerException的理解" class="headerlink" title="NullPointerException的理解"></a>NullPointerException的理解</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *  关于面向对象内容中的NullPointerException的说明： *  凡是引用数据类型的变量（对象、数组）,如果取值为null时，通过此变量调用其内部结构的话，一定就是 *  NullPointerException的异常。 * * @author shkstart * @create 2020-07-01 9:15 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NullPointerExceptionTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        User u1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        u1 = null;</span><span class="token comment" spellcheck="true">//        u1.name = "孔江江";</span><span class="token comment" spellcheck="true">//        u1.show();</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        System.out.println(u1.name.toString());</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String str <span class="token operator">=</span> null<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是一个用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="对象数组的理解"><a href="#对象数组的理解" class="headerlink" title="对象数组的理解"></a>对象数组的理解</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 定义类Student，包含三个属性：学号number(int)，年级state(int)，成绩score(int)。 * 创建20个学生对象，学号为1到20，年级和成绩都由随机数确定。 * 问题一：打印出3年级(state值为3）的学生信息。 * 问题二：使用冒泡排序按学生成绩排序，并遍历所有学生信息 * * 提示： * 1) 生成随机数：Math.random()，返回值类型double; * 2) 四舍五入取整：Math.round(double d)，返回值类型long。 * * @author shkstart * @create 2020-07-01 11:56 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentArrayTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//      创建20个学生对象</span>        Student<span class="token punctuation">[</span><span class="token punctuation">]</span> stus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//虚位以待</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stus<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//给每一个学生的属性赋值</span>            <span class="token comment" spellcheck="true">//学号</span>            stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>number <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//年级：1-6</span>            stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//成绩：0-100</span>            stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//问题一：打印出3年级(state值为3）的学生信息。</span><span class="token comment" spellcheck="true">//        for (int i = 0; i &lt; stus.length; i++) {</span><span class="token comment" spellcheck="true">//            if(stus[i].state == 3){</span><span class="token comment" spellcheck="true">//                stus[i].info();</span><span class="token comment" spellcheck="true">//            }</span><span class="token comment" spellcheck="true">//        }</span>        <span class="token comment" spellcheck="true">//问题二：使用冒泡排序按学生成绩排序，并遍历所有学生信息</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> stus<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> stus<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>stus<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>score <span class="token operator">></span> stus<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">{</span>                    Student temp <span class="token operator">=</span> stus<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    stus<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> stus<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    stus<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stus<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> number<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//学号</span>    <span class="token keyword">int</span> state<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//年级</span>    <span class="token keyword">int</span> score<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//成绩</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"number : "</span> <span class="token operator">+</span> number <span class="token operator">+</span> <span class="token string">", state : "</span> <span class="token operator">+</span> state <span class="token operator">+</span> <span class="token string">", score : "</span> <span class="token operator">+</span> score<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>对应的内存解析</li></ul><p><img src="assets/1593593209912.png" alt="1593593209912"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day03 学习笔记</title>
      <link href="/1970/01/01/day03-xue-xi-bi-ji/"/>
      <url>/1970/01/01/day03-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Day03学习笔记–流程控制"><a href="#Day03学习笔记–流程控制" class="headerlink" title="Day03学习笔记–流程控制"></a>Day03学习笔记–流程控制</h1><h3 id="1-流程控制介绍"><a href="#1-流程控制介绍" class="headerlink" title="1. 流程控制介绍"></a>1. 流程控制介绍</h3><p><img src="assets/1592989181075.png" alt="1592989181075"></p><p><img src="assets/1592989192224.png" alt="1592989192224"></p><h3 id="2-if-else结构"><a href="#2-if-else结构" class="headerlink" title="2. if-else结构"></a>2. if-else结构</h3><ul><li>结构</li></ul><pre><code>结构一：if(条件表达式){    执行代码块；}结构二：二选一if(条件表达式){    执行代码块1;}else{    执行代码块2;}结构三：多选一if(条件表达式1){    执行代码块1;}else if (条件表达式2){    执行代码块2;}   ……else{    执行代码块n;}</code></pre><ul><li>说明</li></ul><pre><code>1. if-else结构中的else是可选的。2. 如果两个条件表达式是“互斥”关系，则哪个写在上面，哪个写在下面都可以。   如果两个条件表达式是有交集的关系，谁上谁下是有区别的。根据题目要求看哪个应该是声明在上面。   如果两个条件表达式是“包含”关系，通常将范围小的声明在范围大的上面。3. 如果执行语句结构中只有一行执行语句，则执行语句所在的一对{}可以省略。   但是，不建议大家省略！</code></pre><ul><li>代码演示</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//针对结构一：</span>        <span class="token keyword">int</span> heartBeats <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//另外：if(heartBeats >= 60 &amp;&amp; heartBeats &lt;= 100) 不能写成：if(60&lt;=heartBeats&lt;=100)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>heartBeats <span class="token operator">&lt;</span> <span class="token number">60</span> <span class="token operator">||</span> heartBeats <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"需要做进一步的检查"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"体检结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//针对结构二：</span>        <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"还未成年，可以多看看动画片"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"可以看看动作片、战争片、..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//针对结构三：</span>        age <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据输入有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"婴幼儿时期"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"少年时期"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"青壮年时期"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中年时期"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">140</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老年时期"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"恭喜你，成仙儿了~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><ul><li>代码演示</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">IfTest1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 从键盘获取岳小鹏的期末成绩</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入岳小鹏的期末成绩(0-100)："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> score <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 根据成绩做if-else判断</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"奖励一辆BMW"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"奖励一辆BMW"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">></span> <span class="token number">80</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;=</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"奖励一台iphone xs max"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">60</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;=</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"奖励一个 iPad"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"什么奖励也没有"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>代码演示</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*大家都知道，男大当婚，女大当嫁。那么女方家长要嫁女儿，当然要提出一定的条件：高：180cm以上；富：财富1千万以上；帅：是。如果这三个条件同时满足，则：“我一定要嫁给他!!!”如果三个条件有为真的情况，则：“嫁吧，比上不足，比下有余。”如果三个条件都不满足，则：“不嫁！”*/</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">IfTest3</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入你的身高(cm):"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> height <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入你的财富值(单位：万):"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> wealth <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        方式一：        System.out.println("请告诉我你是否帅？(true/false):");        boolean isHandsome = scan.nextBoolean();        if(height > 180 &amp;&amp; wealth > 1000 &amp;&amp; isHandsome){            System.out.println("我一定要嫁给他!!!");        }else if(height > 180 || wealth > 1000 || isHandsome){            System.out.println("嫁吧，比上不足，比下有余。");        }else{            System.out.println("不嫁！");        }        */</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请告诉我你是否帅？(是/否):"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String isHandsome <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>height <span class="token operator">></span> <span class="token number">180</span> <span class="token operator">&amp;&amp;</span> wealth <span class="token operator">></span> <span class="token number">1000</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"是"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>isHandsome<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我一定要嫁给他!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>height <span class="token operator">></span> <span class="token number">180</span> <span class="token operator">||</span> wealth <span class="token operator">></span> <span class="token number">1000</span> <span class="token operator">||</span> <span class="token string">"是"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>isHandsome<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"嫁吧，比上不足，比下有余。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不嫁！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-Scanner的使用"><a href="#3-Scanner的使用" class="headerlink" title="3. Scanner的使用"></a>3. Scanner的使用</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*需求：如何从控制台获取常见数据类型的变量实现：使用Scanner类及其方法即可。步骤：1. 导包： import java.util.Scanner;2. 在main方法中创建Scanner的实例： Scanner scan = new Scanner(System.in);3. 调用Scanner的相关方法，获取不同类型的变量: next() \ nextInt() \ nextBoolean() \ ....说明：如果要求输入的类型与用户实际输入的类型不匹配的话，报异常：InputMismatchException*/</span><span class="token keyword">class</span> <span class="token class-name">ScannerTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//2.</span>        Scanner scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.</span>        <span class="token comment" spellcheck="true">//3.1 获取String类型的变量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入你的姓名："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"名字为："</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.2 获取整型int型的变量</span>        <span class="token comment" spellcheck="true">//获取其他整型：nextByte() / nextShort() / nextLong()</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入你的年龄："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> age <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年龄为："</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.3 获取浮点型double型的变量</span>        <span class="token comment" spellcheck="true">//获取其他浮点型：nextFloat()</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入你的体重："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> weight <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"体重为："</span> <span class="token operator">+</span> weight<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.4 获取boolean类型的变量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入你是否已婚(true/false)："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isMarried <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否已婚："</span> <span class="token operator">+</span> isMarried<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.5 获取char类型的变量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入你的性别(男/女)："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String gender <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//"男"</span>        <span class="token keyword">char</span> charGender <span class="token operator">=</span> gender<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//charAt(index):获取index位置的字符</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"性别为："</span> <span class="token operator">+</span> charGender<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-获取随机数"><a href="#4-获取随机数" class="headerlink" title="4. 获取随机数"></a>4. 获取随机数</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">RandomTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//random():返回一个>= 0.0 且 &lt; 1.0的double型值</span>        <span class="token keyword">double</span> value <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取[0,100]范围内的随机数：</span>        <span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//[0,1) -> [0,101) -> [0,100]</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取[10,30]范围内的随机数：</span>        <span class="token keyword">int</span> value1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">21</span>  <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// [0,1) -> [0,21) -> [10,31)  ->[10,30]</span>        <span class="token comment" spellcheck="true">//获取[a,b]范围内的随机数：(int)(Math.random() * (b - a + 1) + a)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-switch-case结构"><a href="#5-switch-case结构" class="headerlink" title="5. switch-case结构"></a>5. switch-case结构</h3><ul><li>结构</li></ul><pre><code>switch(表达式){case 常量1:    语句1;    // break;case 常量2:    语句2;    // break;… …case 常量N:    语句N;    // break;default:    语句;    // break;} </code></pre><ul><li>说明</li></ul><pre><code>① switch中的表达式，可以是如下的一些数据类型：byte \ short \ char \ int \ 枚举类型(JDK5.0) \ String (JDK7.0)② 根据switch中的表达式的值，依次匹配case中的常量。一旦匹配成功，则进入相应的case的执行语句中执行。并考虑执行后续的case结构。直到遇到break或switch-case结构执行结束为止。或③ switch-case要想实现多选一的效果，需要使用break。③ default 相当于if-else中的else结构。是可选的，位置也是灵活的④ switch-case 实现的结构都可以转换为if-else。反之，不成立。凡是既可以使用switch-case，又可以使用if-else结构的地方，建议使用switch-case。因为执行效率高一些。</code></pre><ul><li>代码演示</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SwitchTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Zero"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"One"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//跳出当前的switch-case结构</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Three"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Four"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Other"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//break;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//##########################</span>        String season <span class="token operator">=</span> <span class="token string">"summer1"</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>season<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">"spring"</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"春暖花开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"summer"</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"夏日炎炎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"autumn"</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"秋高气爽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"winter"</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"冬雪皑皑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"季节输入有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Exer</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">35</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">>=</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">>=</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>                max <span class="token operator">=</span> a<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                max <span class="token operator">=</span> c<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">>=</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>                max <span class="token operator">=</span> b<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                max <span class="token operator">=</span> c<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//#####################</span>        <span class="token keyword">int</span> max1<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">>=</span> b <span class="token operator">&amp;&amp;</span> a <span class="token operator">>=</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>            max1 <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">>=</span> a <span class="token operator">&amp;&amp;</span> b <span class="token operator">>=</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>            max1 <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            max1 <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*编写程序：由键盘输入三个整数分别存入变量num1、num2、num3，对它们进行排序(使用 if-else if-else),并且从小到大输出。*/</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Exer1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入第一个整数num1："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num1 <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入第二个整数num2："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num2 <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入第三个整数num3："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num3 <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num1 <span class="token operator">>=</span> num2 <span class="token operator">&amp;&amp;</span> num1 <span class="token operator">>=</span> num3<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num2 <span class="token operator">></span> num3<span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从小到大排列为"</span> <span class="token operator">+</span> num3 <span class="token operator">+</span><span class="token string">"-"</span> <span class="token operator">+</span> num2 <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从小到大排列为"</span> <span class="token operator">+</span> num2 <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> num3 <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>num1 <span class="token operator">&lt;=</span> num2 <span class="token operator">&amp;&amp;</span> num3 <span class="token operator">&lt;=</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num1 <span class="token operator">></span> num3<span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从小到大排列为"</span> <span class="token operator">+</span> num3 <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> num1 <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从小到大排列为"</span> <span class="token operator">+</span> num1 <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> num3 <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>num3 <span class="token operator">>=</span> num1 <span class="token operator">&amp;&amp;</span> num3 <span class="token operator">>=</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num1 <span class="token operator">></span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从小到大排列为"</span> <span class="token operator">+</span> num2 <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> num1 <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> num3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从小到大排列为"</span> <span class="token operator">+</span> num1 <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> num2 <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> num3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//#####################</span>        Scanner scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入第一个数字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num1 <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入第二个数字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num2 <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入第三个数字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num3 <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num1 <span class="token operator">></span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>            temp <span class="token operator">=</span> num2<span class="token punctuation">;</span>            num2 <span class="token operator">=</span> num1<span class="token punctuation">;</span>            num1 <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num1 <span class="token operator">></span> num3<span class="token punctuation">)</span><span class="token punctuation">{</span>            temp <span class="token operator">=</span> num3<span class="token punctuation">;</span>            num3 <span class="token operator">=</span> num1<span class="token punctuation">;</span>            num1 <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num2 <span class="token operator">></span> num3<span class="token punctuation">)</span><span class="token punctuation">{</span>            temp <span class="token operator">=</span> num3<span class="token punctuation">;</span>            num3 <span class="token operator">=</span> num2<span class="token punctuation">;</span>            num2 <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从小到大输出："</span> <span class="token operator">+</span> num1 <span class="token operator">+</span> <span class="token string">" "</span><span class="token operator">+</span> num2 <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> num3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//########推荐#############</span>        Scanner scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入三个整数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num1 <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num2 <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num3 <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num1 <span class="token operator">></span> num2 <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num2 <span class="token operator">></span> num3<span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> num2 <span class="token operator">+</span> <span class="token string">"和"</span> <span class="token operator">+</span> num3 <span class="token operator">+</span><span class="token string">"的从小到大的顺序为："</span> <span class="token operator">+</span> num3 <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> num2 <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>num3 <span class="token operator">></span> num1<span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> num2 <span class="token operator">+</span> <span class="token string">"和"</span> <span class="token operator">+</span> num3 <span class="token operator">+</span><span class="token string">"的从小到大的顺序为："</span> <span class="token operator">+</span> num2 <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> num1 <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> num3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> num2 <span class="token operator">+</span> <span class="token string">"和"</span> <span class="token operator">+</span> num3 <span class="token operator">+</span><span class="token string">"的从小到大的顺序为："</span> <span class="token operator">+</span> num2 <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> num3 <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num2 <span class="token operator">&lt;</span> num3<span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> num2 <span class="token operator">+</span> <span class="token string">"和"</span> <span class="token operator">+</span> num3 <span class="token operator">+</span><span class="token string">"的从小到大的顺序为："</span> <span class="token operator">+</span> num1 <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> num2 <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> num3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>num3 <span class="token operator">&lt;</span> num1<span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> num2 <span class="token operator">+</span> <span class="token string">"和"</span> <span class="token operator">+</span> num3 <span class="token operator">+</span><span class="token string">"的从小到大的顺序为："</span> <span class="token operator">+</span> num3 <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> num1 <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> num2 <span class="token operator">+</span> <span class="token string">"和"</span> <span class="token operator">+</span> num3 <span class="token operator">+</span><span class="token string">"的从小到大的顺序为："</span> <span class="token operator">+</span> num1 <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> num3 <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*编写程序：从键盘上输入2020年的“month”和“day”，要求通过程序输出输入的日期为2020年的第几天。说明：在switch-case结构中不一定使用break。*/</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Exer2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入月份：（1-12）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> month <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入日：（1-31）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> day <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sumDays <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录总天数</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">12</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span><span class="token number">30</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">11</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span><span class="token number">31</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span><span class="token number">30</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span><span class="token number">31</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span><span class="token number">31</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span><span class="token number">30</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span><span class="token number">31</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span><span class="token number">30</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span><span class="token number">31</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span><span class="token number">29</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span><span class="token number">31</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span> day<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*拓展1：见Exer3.java已知2020年1月1日是星期三，从键盘输入2020年的任意一天，请判断它是星期几*/</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Exer3</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入月份：（1-12）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> month <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入日：（1-31）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> day <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sumDays <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录总天数</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">12</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span><span class="token number">30</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">11</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span><span class="token number">31</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span><span class="token number">30</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span><span class="token number">31</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span><span class="token number">31</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span><span class="token number">30</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span><span class="token number">31</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span><span class="token number">30</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span><span class="token number">31</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span><span class="token number">29</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span><span class="token number">31</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span> day<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String info<span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>sumDays <span class="token operator">%</span> <span class="token number">7</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>            info <span class="token operator">=</span> <span class="token string">"星期二"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            info <span class="token operator">=</span> <span class="token string">"星期三"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            info <span class="token operator">=</span> <span class="token string">"星期四"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>            info <span class="token operator">=</span> <span class="token string">"星期五"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>            info <span class="token operator">=</span> <span class="token string">"星期六"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>            info <span class="token operator">=</span> <span class="token string">"星期日"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>            info <span class="token operator">=</span> <span class="token string">"星期一"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            info <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>month <span class="token operator">+</span> <span class="token string">"月"</span> <span class="token operator">+</span> day <span class="token operator">+</span> <span class="token string">"日是2020年的"</span> <span class="token operator">+</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*从键盘分别输入年、月、日，判断这一天是当年的第几天   注：判断一年是否是闰年的标准：       1）可以被4整除，但不可被100整除    或       2）可以被400整除*/</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">SwitchCaseTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入年份："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> year <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入月份：（1-12）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> month <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入日：（1-31）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> day <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sumDays <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录总天数</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">12</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span><span class="token number">30</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">11</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span><span class="token number">31</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span><span class="token number">30</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span><span class="token number">31</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span><span class="token number">31</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span><span class="token number">30</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span><span class="token number">31</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span><span class="token number">30</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span><span class="token number">31</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//判断year是否是闰年</span>                sumDays <span class="token operator">+=</span><span class="token number">29</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                sumDays <span class="token operator">+=</span><span class="token number">28</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//。。。。</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span><span class="token number">31</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            sumDays <span class="token operator">+=</span> day<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>year <span class="token operator">+</span> <span class="token string">"年"</span> <span class="token operator">+</span> month <span class="token operator">+</span> <span class="token string">"月"</span> <span class="token operator">+</span> day <span class="token operator">+</span> <span class="token string">"日是当前的第"</span> <span class="token operator">+</span> sumDays <span class="token operator">+</span> <span class="token string">"天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>switch-case中不一定要使用break</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*例题：对学生成绩大于60分的，输出“合格”。低于60分的，输出“不合格”。*/</span><span class="token keyword">class</span> <span class="token class-name">SwitchCaseTest1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token number">78</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        if(score >= 60){            System.out.println("合格");        }else{            System.out.println("不合格");        }        */</span>        <span class="token comment" spellcheck="true">/*        switch(score){        case 0:            System.out.println("不合格");            break;        case 1:            //...        }        */</span>        <span class="token comment" spellcheck="true">//方式一：</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>score <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//0 - 10</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不合格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"合格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//方式二：</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>score <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不合格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"合格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>说明：如果多个case结构的执行语句相同，则可以考虑合并执行语句。</li><li></li></ul><h2 id="知识点6：for循环"><a href="#知识点6：for循环" class="headerlink" title="知识点6：for循环"></a>知识点6：for循环</h2><ul><li>循环结构的4个要素</li></ul><p><img src="/Users/mymac/Desktop/Java/2_%E6%AF%8F%E6%97%A5%E7%AC%94%E8%AE%B0/assets/1593334412406.png" alt="1593334412406"></p><pre><code>① 初始化条件② 循环条件  ---&gt;boolean类型③ 循环体④ 迭代部分for(①;②;④){    ③        }执行过程：① - ② - ③ - ④ - ② - ③ - ④ - ② - ③ - ④ - .... - ②</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ForTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*        System.out.println("Hello World!");        System.out.println("Hello World!");        System.out.println("Hello World!");        System.out.println("Hello World!");        System.out.println("Hello World!");        */</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//此时出了for循环结构，所以此时的i不可用。</span>        <span class="token comment" spellcheck="true">//System.out.println(i);</span>        <span class="token comment" spellcheck="true">//练习</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//输出结果：abcbcbc</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//练习：遍历100以内的偶数,并计算偶数的和，偶数的个数</span>        <span class="token comment" spellcheck="true">//体会：累加的思想</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录偶数的和</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录偶数的个数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                sum <span class="token operator">+=</span> j<span class="token punctuation">;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"偶数总和为："</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"偶数个数为："</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>练习1</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*编写程序从1循环到150，并在每行打印一个值，另外在每个3的倍数行上打印出“foo”,在每个5的倍数行上打印“biz”,在每个7的倍数行上打印输出“baz”。*/</span><span class="token keyword">class</span> <span class="token class-name">ForTest1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">150</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"foo "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"biz "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"baz "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>练习2</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*题目：输入两个正整数m和n，求其最大公约数和最小公倍数。比如：12和20的最大公约数是4，最小公倍数是60。说明：使用在循环中，表示一旦执行break，就跳出循环结构*/</span><span class="token keyword">class</span> <span class="token class-name">ForTest2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>        m <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取m和n的较小值</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token punctuation">(</span>m <span class="token operator">&lt;</span> n<span class="token punctuation">)</span><span class="token operator">?</span> m <span class="token operator">:</span> n<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> min<span class="token punctuation">;</span>i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大公约数为："</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用在循环中，表示一旦执行break，就跳出循环结构</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取m和n的较大值</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token punctuation">(</span>m <span class="token operator">></span> n<span class="token punctuation">)</span><span class="token operator">?</span> m <span class="token operator">:</span> n<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> max<span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m <span class="token operator">*</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> m <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">%</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最小公倍数为："</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="知识点7：while"><a href="#知识点7：while" class="headerlink" title="知识点7：while"></a>知识点7：while</h2><pre class=" language-java"><code class="language-java">① 初始化条件② 循环条件  <span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">boolean</span>类型③ 循环体④ 迭代部分<span class="token keyword">while</span>循环的结构<span class="token operator">:</span>①<span class="token keyword">while</span><span class="token punctuation">(</span>②<span class="token punctuation">)</span><span class="token punctuation">{</span>    ③    ④<span class="token punctuation">}</span>执行过程：① <span class="token operator">-</span> ② <span class="token operator">-</span> ③ <span class="token operator">-</span> ④ <span class="token operator">-</span> ② <span class="token operator">-</span> ③ <span class="token operator">-</span> ④ <span class="token operator">-</span> ② <span class="token operator">-</span> ③ <span class="token operator">-</span> ④ <span class="token operator">-</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">-</span> ②说明：<span class="token number">1</span><span class="token punctuation">.</span> <span class="token keyword">for</span>循环和<span class="token keyword">while</span>循环是可以相互转换的<span class="token number">2</span><span class="token punctuation">.</span> <span class="token keyword">while</span>循环结束后，初始化条件中如果定义了变量，还可以继续使用。而<span class="token keyword">for</span>循环不可以。</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">WhileTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//遍历100以内的偶数</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//一定不要忘了迭代条件！</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//101</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="知识点8：do-while"><a href="#知识点8：do-while" class="headerlink" title="知识点8：do-while"></a>知识点8：do-while</h2><pre class=" language-java"><code class="language-java">① 初始化条件② 循环条件  <span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">boolean</span>类型③ 循环体④ 迭代部分<span class="token keyword">do</span><span class="token operator">-</span><span class="token keyword">while</span>循环的结构<span class="token operator">:</span>①<span class="token keyword">do</span><span class="token punctuation">{</span>    ③    ④<span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>②<span class="token punctuation">)</span><span class="token punctuation">;</span>执行过程：① <span class="token operator">-</span> ③ <span class="token operator">-</span> ④ <span class="token operator">-</span> ② <span class="token operator">-</span> ③ <span class="token operator">-</span> ④ <span class="token operator">-</span> ② <span class="token operator">-</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">-</span> ②说明：<span class="token keyword">do</span><span class="token operator">-</span><span class="token keyword">while</span>循环的循环体至少执行一次！开发中使用<span class="token keyword">for</span>和<span class="token keyword">while</span>居多。</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">DoWhileTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//遍历100以内的偶数</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">do</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//########测试：do-while至少会执行一次################</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">do</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello,do-while!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            num<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//#################</span>        <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>num1 <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello,while!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            num1<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="知识点9：嵌套循环"><a href="#知识点9：嵌套循环" class="headerlink" title="知识点9：嵌套循环"></a>知识点9：嵌套循环</h2><pre class=" language-java"><code class="language-java">嵌套循环的使用<span class="token number">1</span><span class="token punctuation">.</span> 理解：在一个循环结构A的循环体中，又出现了另一个循环结构B。则构成嵌套循环。   其中，循环结构A称为外层循环；循环结构B称为内层循环<span class="token number">2</span><span class="token punctuation">.</span> 外层循环每执行一次，内层循环就需要完成的遍历一遍所有的数据。<span class="token number">3</span><span class="token punctuation">.</span> 外层循环遍历m次，内层循环遍历n次，则内层循环的循环体一共需要执行m <span class="token operator">*</span> n次<span class="token number">4</span><span class="token punctuation">.</span> 技巧：外层循环控制行数，内层循环控制列数</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ForForTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">/</span><span class="token comment" spellcheck="true">/********        for(int i = 1;i &lt;= 8;i++){            System.out.print("*");        }        System.out.println();        System.out.println();        /*        ********        ********        ********        ********        ********        */</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//外层循环</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//内层循环</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*            i        j(*的个数)   j == i        *            1        1                **            2        2        ***            3        3        ****        4        4        *****        5        5        */</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*                        i        j(*的个数)        i + j = 5  ->  j = 5 - i        ****            1        4        ***                2        3        **                3        2        *                4        1        */</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token operator">-</span> i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*----* ---* * --* * * -* * * * * * * * * -* * * * --* * * ---* * ----* */</span>                <span class="token comment" spellcheck="true">//上半部分</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//-</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token operator">-</span> i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//*</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"* "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>练习：九九乘法表</li></ul><pre><code>/*九九乘法表1 * 1 = 11 * 2 = 2  2 * 2 = 41 * 3 = 3 ... 3 * 3 = 9...1 * 9 = 9 ... 9 * 9 = 81*/class NineNineTable {    public static void main(String[] args) {        for(int i = 1;i &lt;= 9;i++){            for(int j = 1;j &lt;= i;j++){                System.out.print(j + "*" + i + "=" + j * i + "  ");            }            System.out.println();        }    }}</code></pre><ul><li><p>质数的输出</p><ul><li>基本实现：</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*100以内的所有质数质数（素数）：只能被1和它本身整除的自然数。 --> 从2开始到这个数-1为止，没有任何一个自然数是这个数本身的约数。比如：2 3 5 7 11 ....    8 (2-7)*/</span><span class="token keyword">class</span> <span class="token class-name">PrimeNumberTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">/</span><span class="token operator">*</span>        方式一：        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">==</span> i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span></code></pre></li></ul><pre><code>      }      */      //方式二      boolean flag = true;      for(int i = 2;i &lt;= 100;i++){          for(int j = 2;j &lt; i;j++){              if(i % j == 0){                  flag = false;              }          }          if(flag){//if(flag == true){              System.out.println(i);          }          flag = true;      }  }</code></pre><p>  }</p><pre><code>  - 优化以后：  ```java  /*  100以内的所有质数  优化的操作  如何衡量一个算法的优劣？  &gt; 时间复杂度（更关注）  &gt; 空间复杂度  */  class PrimeNumberTest1 {      public static void main(String[] args) {          long start = System.currentTimeMillis();//开始时间          int count = 0;//记录质数的个数          boolean flag = true;          for(int i = 2;i &lt;= 100000;i++){              for(int j = 2;j &lt;= Math.sqrt(i);j++){//优化二：临界值改为Math.sqrt(i)                  if(i % j == 0){                      flag = false;                      break;//优化一：针对于非质数                  }              }              if(flag){//if(flag == true){                  //System.out.println(i);                  count++;              }              flag = true;          }          long end = System.currentTimeMillis();//结束时间          System.out.println("花费的时间为：" + (end - start));//14943 - 1675  - 543          System.out.println(count);//9592      }  }</code></pre><ul><li><p>使用带标签的continue的实现：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用带标签的continue的实现</span><span class="token keyword">class</span> <span class="token class-name">PrimeNumberTest2</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      l<span class="token operator">:</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//优化二：临界值改为Math.sqrt(i)</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  <span class="token keyword">continue</span> l<span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="如何结束一个循环结构"><a href="#如何结束一个循环结构" class="headerlink" title="如何结束一个循环结构"></a>如何结束一个循环结构</h3><pre><code>1. 循环结构如果不结束，那就是一个死循环！2. 开发中，要避免出现死循环！3. 如何结束一个循环结构呢？    &gt; 方式一：循环条件返回false    &gt; 方式二：循环体中执行break4. while(true) 或 for(;;)的使用</code></pre><ul><li>练习</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ForWhileTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> positiveNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录正数的个数</span>        <span class="token keyword">int</span> negativeNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录负数的个数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//while(true){</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数。（退出请输入0）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//正数</span>                positiveNumber<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//负数</span>                negativeNumber<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正数的个数为："</span> <span class="token operator">+</span> positiveNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"负数的个数为："</span> <span class="token operator">+</span> negativeNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="知识点10：break和continue"><a href="#知识点10：break和continue" class="headerlink" title="知识点10：break和continue"></a>知识点10：break和continue</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*break和continue关键字的使用            使用范围                在循环结构中表示的意思            共同点break:        switch-case            循环结构                跳出当前循环                    在关键字的后面不能编写执行语句continue:    循环结构                跳出当次循环                    在关键字的后面不能编写执行语句了解带标签的break和continue的使用*/</span><span class="token keyword">class</span> <span class="token class-name">BreakContinueTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//break;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//不能编写执行语句</span>                <span class="token comment" spellcheck="true">//System.out.println("今晚迪丽热巴请我吃饭！！");</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"#######################"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//##############################</span>        label<span class="token operator">:</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//break;//默认：结束包裹break关键字的最近的一层循环。</span>                    <span class="token comment" spellcheck="true">//continue;//默认：结束包裹continue关键字的最近的一次循环。</span>                    <span class="token comment" spellcheck="true">//了解带标签的break和continue的使用</span>                    <span class="token comment" spellcheck="true">//break label;</span>                    <span class="token keyword">continue</span> label<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day02学习笔记</title>
      <link href="/1970/01/01/day02-xue-xi-bi-ji/"/>
      <url>/1970/01/01/day02-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Day2学习笔记–变量、运算符"><a href="#Day2学习笔记–变量、运算符" class="headerlink" title="Day2学习笔记–变量、运算符"></a>Day2学习笔记–变量、运算符</h1><h2 id="知识点1：变量"><a href="#知识点1：变量" class="headerlink" title="知识点1：变量"></a>知识点1：变量</h2><ul><li>说明</li></ul><pre><code>1. java中的变量定义的规则：数据类型 变量名 = 变量值2. 注意点：① 变量必须在初始化之后，才能使用② 每个变量都有其声明所在的作用域。在其作用域内都可以使用。出了作用域之后，就不能使用了。③ 在同一个作用域内不允许定义两个同名的变量</code></pre><ul><li>代码演示</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">VariableTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//编译错误：变量必须在声明之后才可以使用</span>        <span class="token comment" spellcheck="true">//System.out.println(weight);</span>        <span class="token comment" spellcheck="true">//1.1变量的声明</span>        <span class="token keyword">double</span> weight<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//编译错误：变量必须在初始化之后，才能使用</span>        <span class="token comment" spellcheck="true">//System.out.println(weight);</span>        <span class="token comment" spellcheck="true">//1.2 变量的赋值</span>        weight <span class="token operator">=</span> <span class="token number">80.6</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//变量的声明和赋值操作同时完成</span>        <span class="token keyword">int</span> myAge <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myAge<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//编译错误</span>        <span class="token comment" spellcheck="true">//System.out.println(score);</span>        <span class="token comment" spellcheck="true">//编译错误：在同一个作用域内不允许定义两个同名的变量</span>        <span class="token comment" spellcheck="true">//int myAge = 30;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myAge<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token number">98</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> myAge <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="知识点2：8种基本数据类型"><a href="#知识点2：8种基本数据类型" class="headerlink" title="知识点2：8种基本数据类型"></a>知识点2：8种基本数据类型</h2><h3 id="1-变量的分类"><a href="#1-变量的分类" class="headerlink" title="1. 变量的分类"></a>1. 变量的分类</h3><ul><li>变量按照数据类型来分：</li></ul><p><img src="assets/1592893143390.png" alt="1592893143390"></p><ul><li>变量按照在类中声明的位置来分：（了解）</li></ul><p><img src="assets/1592893230844.png" alt="1592893230844"></p><h3 id="2-8种基本数据类型的使用"><a href="#2-8种基本数据类型的使用" class="headerlink" title="2. 8种基本数据类型的使用"></a>2. 8种基本数据类型的使用</h3><h4 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.整型：byte(1个字节 = 8bit, 范围：-128 ~ +127) 、 short(2字节) 、 int(4字节)  、 long(8字节) </span><span class="token comment" spellcheck="true">//① 变量的赋值不能超出数据类型的表数范围</span><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//b1 = 128;//编译不通过</span><span class="token comment" spellcheck="true">//② 给long类型变量赋值时，需要以"l" 或"L"结尾</span><span class="token keyword">long</span> l1 <span class="token operator">=</span> 123L<span class="token punctuation">;</span><span class="token keyword">long</span> l2 <span class="token operator">=</span> 432l<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//123</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//432</span><span class="token comment" spellcheck="true">//③ 开发中，通常定义整型为int</span></code></pre><p><img src="assets/1592893412040.png" alt="1592893412040"></p><h4 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//2.浮点型:float(4字节,单精度)、double(8字节，双精度) </span><span class="token comment" spellcheck="true">//① float定义的变量值必须以"f"或"F"结尾</span><span class="token comment" spellcheck="true">//② 开发中，默认我们可以使用double类型来定义浮点类型的变量</span><span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">123.43</span><span class="token punctuation">;</span><span class="token keyword">double</span> d2 <span class="token operator">=</span> <span class="token number">5436345234.235234</span><span class="token punctuation">;</span><span class="token keyword">float</span> f1 <span class="token operator">=</span> <span class="token number">123.43F</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="assets/1592893459767.png" alt="1592893459767"></p><h4 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//3.字符型:char</span><span class="token comment" spellcheck="true">//一个字符占2个字节</span><span class="token comment" spellcheck="true">//① 通常使用一对单引号表示一个字符。内部只能有一个字符</span><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span><span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">;</span><span class="token keyword">char</span> c3 <span class="token operator">=</span> <span class="token string">'セ'</span><span class="token punctuation">;</span><span class="token keyword">char</span> c4 <span class="token operator">=</span> <span class="token string">'中'</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编译错误：内部只能声明一个字符</span><span class="token comment" spellcheck="true">//char c5 = 'ab';</span><span class="token comment" spellcheck="true">//char c6 = '123';</span><span class="token comment" spellcheck="true">//char c7 = '';</span><span class="token comment" spellcheck="true">//②其他表示方式：1.表示转义字符 2.使用Unicode值表示 </span><span class="token keyword">char</span> c8 <span class="token operator">=</span> <span class="token string">'\n'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//换行符</span><span class="token keyword">char</span> c9 <span class="token operator">=</span> <span class="token string">'\t'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//制表符</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span> <span class="token operator">+</span> c8 <span class="token operator">+</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span> <span class="token operator">+</span> c9 <span class="token operator">+</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> c10 <span class="token operator">=</span> <span class="token string">'\u0026'</span><span class="token punctuation">;</span><span class="token keyword">char</span> c11 <span class="token operator">=</span> <span class="token string">'&amp;'</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c10<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>常用的字符集：ASCII 、GB2312、GBK、Unicode、UTF-8</li></ul><h4 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//4. 布尔型：boolean</span><span class="token comment" spellcheck="true">// 只有两个取值：true 、 false</span><span class="token comment" spellcheck="true">// 通常使用在条件判断、循环结构中</span><span class="token keyword">boolean</span> isMarried <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>isMarried<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"好好珍惜自己的媳妇"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"可以多谈谈女朋友"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*int myAge = 18;if(myAge > 18){}*/</span></code></pre><h2 id="知识点3-基本数据类型间的运算规则"><a href="#知识点3-基本数据类型间的运算规则" class="headerlink" title="知识点3: 基本数据类型间的运算规则"></a>知识点3: 基本数据类型间的运算规则</h2><h3 id="1-自动类型提升"><a href="#1-自动类型提升" class="headerlink" title="1. 自动类型提升"></a>1. 自动类型提升</h3><pre><code>基本数据类型变量间运算的规则1. 此时的运算规则涉及到的是7种基本数据类型，不包含boolean2. 容量小的和容量大的数据类型的变量间做运算时，满足：自动类型提升  &gt; 容量小的和容量大的数据类型的变量间做运算时，结果的数据类型为容量大的数据类型。  &gt; 特别的：如果byte、short、char三者之间做运算的话，结果为int类型。  总结：byte 、short、char -&gt; int -&gt; long -&gt; float -&gt; double 说明：容量大小指的是表数的范围。</code></pre><ul><li>代码演示</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">VariableTest2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> l1 <span class="token operator">=</span> 123L<span class="token punctuation">;</span>        <span class="token keyword">float</span> f1 <span class="token operator">=</span> <span class="token number">123.4F</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//编译失败</span>        <span class="token comment" spellcheck="true">//long l2 = l1 + f1;</span>        <span class="token keyword">float</span> f2 <span class="token operator">=</span> l1 <span class="token operator">+</span> f1<span class="token punctuation">;</span>        <span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">432</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//编译失败</span>        <span class="token comment" spellcheck="true">//short s = b1 + i1;</span>        <span class="token keyword">int</span> i2 <span class="token operator">=</span> b1 <span class="token operator">+</span> i1<span class="token punctuation">;</span>        <span class="token keyword">float</span> f3 <span class="token operator">=</span> i1<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//432.0</span>        <span class="token comment" spellcheck="true">//##########################</span>        <span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//97</span>        <span class="token keyword">int</span> i3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i4 <span class="token operator">=</span> c1 <span class="token operator">+</span> i3<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//############################</span>        <span class="token keyword">byte</span> bb1 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>        <span class="token keyword">short</span> ss1 <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//编译失败</span>        <span class="token comment" spellcheck="true">//short ss2 = bb1 + ss1;</span>        <span class="token keyword">char</span> cc1 <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//编译失败</span>        <span class="token comment" spellcheck="true">//char cc2 = bb1 + cc1;</span>        <span class="token comment" spellcheck="true">//编译失败</span>        <span class="token comment" spellcheck="true">//short ss3 = ss1 + cc1;</span>        <span class="token keyword">byte</span> bb2 <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//编译失败</span>        <span class="token keyword">byte</span> bb3 <span class="token operator">=</span> bb1 <span class="token operator">+</span> bb2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-强制类型转换"><a href="#2-强制类型转换" class="headerlink" title="2. 强制类型转换"></a>2. 强制类型转换</h3><pre><code>自动类型提升规则的逆运算：强制类型转换1. 强制类型转换，可以将容量大的数据类型的变量转换为容量小的数据类型的变量2. 强制类型转换，需要使用强制类型转换符</code></pre><ul><li>代码演示</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">VariableTest3</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> l1 <span class="token operator">=</span> 123L<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//编译失败</span>        <span class="token comment" spellcheck="true">//int i1 = l1;</span>        <span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>l1<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//损失精度的情况1：</span>        <span class="token keyword">double</span> weight <span class="token operator">=</span> <span class="token number">140.23</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> truncWeight <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>weight<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>truncWeight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//140</span>        <span class="token comment" spellcheck="true">//损失精度的情况2：</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> byteNum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>num<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>byteNum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-128</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-补充说明"><a href="#3-补充说明" class="headerlink" title="3. 补充说明"></a>3. 补充说明</h3><pre><code>//对于整型数据类型，常量的默认类型为：int//对于浮点数据类型，常量的默认类型为：double</code></pre><ul><li>代码演示</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">VariableTest4</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> count <span class="token operator">=</span> <span class="token number">2341234</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//编译错误</span>        <span class="token comment" spellcheck="true">//long count1 = 2423535443654564;</span>        <span class="token keyword">long</span> count1 <span class="token operator">=</span> 2423535443654564L<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//编译错误</span>        <span class="token comment" spellcheck="true">//float f1 = 123.23;</span>        <span class="token keyword">float</span> f1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token number">123.23</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//</span>        <span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i1 <span class="token operator">=</span> b1 <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//编译错误</span>        <span class="token comment" spellcheck="true">//float f2 = b1 + 123.34;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="知识点4：String与基本数据类型间的运算规则"><a href="#知识点4：String与基本数据类型间的运算规则" class="headerlink" title="知识点4：String与基本数据类型间的运算规则"></a>知识点4：String与基本数据类型间的运算规则</h2><h3 id="1-String的基本使用"><a href="#1-String的基本使用" class="headerlink" title="1. String的基本使用"></a>1. String的基本使用</h3><ul><li>String类型的变量使用一对””进行定义。</li></ul><pre class=" language-java"><code class="language-java">String info <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>String s1 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以编译通过</span></code></pre><h3 id="2-String与8种基本数据类型间的运算规则"><a href="#2-String与8种基本数据类型间的运算规则" class="headerlink" title="2. String与8种基本数据类型间的运算规则"></a>2. String与8种基本数据类型间的运算规则</h3><pre><code>1. String 与 8种基本数据类型之间只能做连接运算： +2. 运算的结果是String类型</code></pre><ul><li>代码演示</li></ul><pre class=" language-java"><code class="language-java">String info <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>String s1 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以编译通过</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>String s2 <span class="token operator">=</span> info <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token boolean">true</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//######################</span><span class="token comment" spellcheck="true">//编译失败</span><span class="token comment" spellcheck="true">//String s3 = num;</span>String s4 <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编译失败</span><span class="token comment" spellcheck="true">//int i1 = (int)s4;</span><span class="token comment" spellcheck="true">//包装类时讲</span><span class="token keyword">int</span> i2 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>练习</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*练习1：*/</span><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//97</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>String str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1 <span class="token operator">+</span> i <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//98hello</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1 <span class="token operator">+</span> str <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ahello1</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1 <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a1hello</span><span class="token comment" spellcheck="true">/*练习2：*/</span><span class="token comment" spellcheck="true">//*    *</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'*'</span> <span class="token operator">+</span> <span class="token string">'\t'</span> <span class="token operator">+</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//93</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'*'</span> <span class="token operator">+</span> <span class="token string">'\t'</span> <span class="token operator">+</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//51*</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*"</span> <span class="token operator">+</span> <span class="token string">'\t'</span> <span class="token operator">+</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//*    *</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*"</span> <span class="token operator">+</span> <span class="token string">"\\t"</span> <span class="token operator">+</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//*    *</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*\t*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//*    *</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"芳芳老师很\"漂亮\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//芳芳老师很"漂亮"</span></code></pre><h2 id="知识点5：进制间的运算（了解）"><a href="#知识点5：进制间的运算（了解）" class="headerlink" title="知识点5：进制间的运算（了解）"></a>知识点5：进制间的运算（了解）</h2><h3 id="1-了解常见的几种进制"><a href="#1-了解常见的几种进制" class="headerlink" title="1. 了解常见的几种进制"></a>1. 了解常见的几种进制</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*二进制(binary)：0,1 ，满2进1.以0b或0B开头。   十进制(decimal)：0-9 ，满10进1。八进制(octal)：0-7 ，满8进1. 以数字0开头表示。十六进制(hex)：0-9及A-F，满16进1. 以0x或0X开头表示。此处的A-F不区分大小写。    如：0x21AF +1= 0X21B0*/</span><span class="token keyword">class</span> <span class="token class-name">BinaryTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">0b10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">010</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num3 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num4 <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-熟悉二进制的情况"><a href="#2-熟悉二进制的情况" class="headerlink" title="2. 熟悉二进制的情况"></a>2. 熟悉二进制的情况</h3><ul><li><p>计算机的底层都是使用二进制表示数据的</p></li><li><p>对于数值型的变量，底层使用数值的二进制数据的补码表示数据</p></li><li><p>二进制原码、反码、补码的关系：</p><ul><li><p>正数：原码、反码、补码，三码合一</p></li><li><p>负数：</p><pre><code>负数的反码：是对原码按位取反，只是最高位（符号位）确定为1。负数的补码：其反码加1。</code></pre></li></ul></li></ul><h3 id="3-二进制与十进制之间的转换"><a href="#3-二进制与十进制之间的转换" class="headerlink" title="3. 二进制与十进制之间的转换"></a>3. 二进制与十进制之间的转换</h3><ul><li>二进制转十进制</li></ul><p><img src="assets/1592897293247.png" alt="1592897293247"></p><ul><li><p>十进制转二进制：除2取余的逆</p><p><img src="assets/1592897324035.png" alt="1592897324035"></p></li></ul><h3 id="4-与其他进制间的转换"><a href="#4-与其他进制间的转换" class="headerlink" title="4. 与其他进制间的转换"></a>4. 与其他进制间的转换</h3><p><img src="assets/1592897339628.png" alt="1592897339628"></p><ul><li>二进制转换为八进制、十六进制</li></ul><p><img src="assets/1592897369197.png" alt="1592897369197"></p><ul><li>八进制、十六进制转换为二进制</li></ul><p><img src="assets/1592897376637.png" alt="1592897376637"></p><h2 id="知识6：运算符"><a href="#知识6：运算符" class="headerlink" title="知识6：运算符"></a>知识6：运算符</h2><h3 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1. 算术运算符"></a>1. 算术运算符</h3><pre><code>+  -  +  -  *  /  %  (前)++  (后)++  (前)--  (后)--  +</code></pre><ul><li>代码测试</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">AriTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> f1 <span class="token operator">=</span> <span class="token number">1.2F</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> f2 <span class="token operator">=</span> num1 <span class="token operator">*</span> f1<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"f2 = "</span> <span class="token operator">+</span> f2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关于除法：/</span>        <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num3 <span class="token operator">=</span> num2 <span class="token operator">/</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"num3 = "</span> <span class="token operator">+</span> num3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关于取模： %</span>        <span class="token comment" spellcheck="true">//常用来判断被模数是否能被模数除尽。比如：是否是一个偶数  num % 2 == 0</span>        <span class="token comment" spellcheck="true">//取模运算结果的符号与被模数的符号相同</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">12</span> <span class="token operator">%</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">12</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">12</span> <span class="token operator">%</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">12</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//(前)++ ： 先自增1，再运算</span>        <span class="token comment" spellcheck="true">//(后)++ ：先运算，后自增1</span>        <span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b1 <span class="token operator">=</span> <span class="token operator">++</span>a1<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a1 = "</span> <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a1 = 11</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b1 = "</span> <span class="token operator">+</span> b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//b1 = 11</span>        <span class="token keyword">int</span> a2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b2 <span class="token operator">=</span> a2<span class="token operator">++</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a2 = "</span> <span class="token operator">+</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a2 = 11</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b2 = "</span> <span class="token operator">+</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//b2 = 10</span>        <span class="token comment" spellcheck="true">//说明：++ 或 --的操作，并不会改变变量本身的数据类型</span>        <span class="token keyword">short</span> s1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//s1 = s1 + 1;//编译错误</span>        <span class="token comment" spellcheck="true">//s1 = (short)(s1 + 1);//之前的做法</span>        s1<span class="token operator">++</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//(前)-- ： 先自减1，再运算</span>        <span class="token comment" spellcheck="true">//(后)-- ：先运算，后自减1</span>        <span class="token keyword">int</span> a3 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b3 <span class="token operator">=</span> <span class="token operator">--</span>a3<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//int b3 = a3--;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-赋值运算符"><a href="#2-赋值运算符" class="headerlink" title="2. 赋值运算符"></a>2. 赋值运算符</h3><pre><code>= , +=, -=, *=, /=, %=</code></pre><ul><li>代码演示</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SetValueTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num2 <span class="token operator">=</span> num1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//自动类型提升</span>        <span class="token keyword">float</span> num3 <span class="token operator">=</span> <span class="token number">10.4F</span><span class="token punctuation">;</span>        num2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>num3<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//强制类型转换</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        m <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//类似于 m = m + 5;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m = "</span> <span class="token operator">+</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">short</span> s1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        s1 <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//运算以后的结果，仍为原数据类型</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1 = "</span> <span class="token operator">+</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        拓展1：        int i = 1;        i *= 0.1;         拓展2：        int n = 10;        n += (n++) + (++n);        拓展3：        int m = 2;        int n = 3;        n *= m++;     //n = n * m++        System.out.println("m=" + m);        System.out.println("n=" + n);        */</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        n <span class="token operator">+=</span> <span class="token punctuation">(</span>n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//n = n + (n++) + (++n)</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//32</span>        <span class="token comment" spellcheck="true">//开发场景1：定义了int型变量，想让此变量自增1,如何操作？</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方法一：</span>        <span class="token comment" spellcheck="true">//i = i + 1;</span>        <span class="token comment" spellcheck="true">//方式二：推荐</span>        <span class="token comment" spellcheck="true">//i++;</span>        <span class="token comment" spellcheck="true">//方式三：</span>        <span class="token comment" spellcheck="true">//i += 1;</span>        <span class="token comment" spellcheck="true">//开发场景2：定义了int型变量，想让此变量自增2,如何操作？</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方法一：</span>        <span class="token comment" spellcheck="true">//j = j + 1;</span>        <span class="token comment" spellcheck="true">//方式二：推荐。因为不改变数据类型</span>        <span class="token comment" spellcheck="true">//j += 2;</span>        <span class="token comment" spellcheck="true">//错误的</span>        <span class="token comment" spellcheck="true">//(j++)++;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-比较运算符"><a href="#3-比较运算符" class="headerlink" title="3. 比较运算符"></a>3. 比较运算符</h3><pre><code>==  !=  &gt;  &lt;  &gt;=  &lt;=  instanceof(略)说明：① 运算的结果为boolean类型② 特别小心== 和 = 的区别</code></pre><p><img src="assets/1592902810021.png" alt="1592902810021"></p><ul><li>代码演示</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">CompareTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">=</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//20</span>        <span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b2 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1 <span class="token operator">==</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b2 <span class="token operator">=</span> b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="知识点1：运算符"><a href="#知识点1：运算符" class="headerlink" title="知识点1：运算符"></a>知识点1：运算符</h2><h3 id="1-逻辑运算符"><a href="#1-逻辑运算符" class="headerlink" title="1. 逻辑运算符"></a>1. 逻辑运算符</h3><p><img src="file:///Users/mymac/Desktop/Java/2_%E6%AF%8F%E6%97%A5%E7%AC%94%E8%AE%B0/assets/1592970616871.png?lastModify=1593667778" alt="1592970616871"></p><ul><li>说明</li></ul><pre><code>&amp; &amp;&amp;  |  ||  ! ^说明：1. 逻辑运算符操作的都是boolean类型的变量2. 逻辑运算符的运算结果也是boolean类型class LogicTest {  public static void main(String[] args) {    //&amp; 和 &amp;&amp;相同点：当符号左边是true时，都执行符号右边的操作    //不同点：    //&amp; : 当符号左边是false时,继续执行符号右边的操作    //&amp;&amp; : 当符号左边是false时,不再执行符号右边的操作    //&amp; 与 &amp;&amp; 表达的都是且的关系。但是，在开发中我们使用&amp;&amp;的频率高一些。    boolean b1 = true;    b1 = false;    int n1 = 10;    if(b1 &amp; (n1++) &gt; 0){      System.out.println("今天天气稍微闷热一些~");    }else{      System.out.println("明天预计天气稍微闷热一些~");    }    System.out.println("n1 = " + n1);    //#################################    boolean b2 = true;    b2 = false;    int n2 = 10;    if(b2 &amp;&amp; (n2++) &gt; 0){      System.out.println("今天天气稍微闷热一些~");    }else{      System.out.println("明天预计天气稍微闷热一些~");    }    System.out.println("n2 = " + n2);    //###############################    //| 和 || 相同点：当符号左边是false时，都执行符号右边的操作    //不同点：    //| : 当符号左边是true时,继续执行符号右边的操作    //|| : 当符号左边是true时,不再执行符号右边的操作    //| 与 || 表达的都是或的关系。但是，在开发中我们使用||的频率高一些。    boolean b3 = false;    b3 = true;    int n3 = 10;    if(b3 | (n3++) &gt; 0){      System.out.println("今天天气稍微闷热一些~");    }else{      System.out.println("明天预计天气稍微闷热一些~");    }    System.out.println("n3 = " + n3);    //###################    boolean b4 = false;    b4 = true;    int n4 = 10;    if(b4 || (n4++) &gt; 0){      System.out.println("今天天气稍微闷热一些~");    }else{      System.out.println("明天预计天气稍微闷热一些~");    }    System.out.println("n4 = " + n4);  }}&lt;&lt;   &gt;&gt;   &gt;&gt;&gt;  &amp;  |  ^  ~总结：&lt;&lt; ： 在一定范围内，每左移一位，数值*2&gt;&gt; : 在一定范围内，每右移一位，数值 / 2"过犹不及"&gt;&gt;&gt; : 不管是正数还是负数，右移之后，高位都补0总结：我们在开发中使用位运算的机会不多。具体说到如果使用的话，主要是为了提升运算的效率。经典的面试题：最高效的方式计算 2 * 8  2 &lt;&lt; 38 &lt;&lt; 1class BitTest {  public static void main(String[] args) {    System.out.println("13 &lt;&lt; 2 : " + (13 &lt;&lt; 2));    System.out.println("-13 &lt;&lt; 2 : " + (-13 &lt;&lt; 2));    System.out.println("13 &lt;&lt; 27 : " + (13 &lt;&lt; 27));    System.out.println("13 &lt;&lt; 28 : " + (13 &lt;&lt; 28));    System.out.println("13 &gt;&gt; 2 : " + (13 &gt;&gt; 2));    System.out.println("-13 &gt;&gt; 2 : " + (-13 &gt;&gt; 2));    System.out.println("-13 &gt;&gt;&gt; 2 : " + (-13 &gt;&gt;&gt; 2));    //练习：如何交换两个int型变量的值    int m = 10;    int n = 20;    System.out.println("m = " + m + ", n = " + n);    //交换两个变量的值(重点)    //方式一：推荐！    //int temp = m;    //m = n;    //n = temp;    //方式二：使用有局限性：① 可能会超出int的范围  ② 数据类型的局限性    //m = m + n;//10 + 20    //n = m - n;//30 - 20    //m = m - n;//30 - 10    //方式三：使用有局限性：数据类型的局限性    m = m ^ n;    n = m ^ n;    m = m ^ n;    System.out.println("m = " + m + ", n = " + n);  }}格式： (条件表达式)? 表达式1 : 表达式2说明1： ① 条件表达式的结果为boolean       ② 如果条件表达式的结果为true,则返回表达式1。反之，如果条件表达式的结果为false,则返回表达式2       ③ 表达式1和表达式2满足一致性。说明2：三元运算符可以嵌套使用说明3：凡是可以使用三元运算符的地方，都可以改写成if-else结构。反之，不成立。       凡是既可以使用三元运算符，又可以使用if-else结构的地方，建议使用三元运算符。因为执行效率高一些。class SanYuanTest {  public static void main(String[] args) {    //获取两个数的较大值    int m = 10;    byte n = 15;    int max = (m &gt; n)? m : n;    System.out.println("较大值为：" + max);    //String s = 12;//编译不通过    String maxString = (m &gt; n)? "m大" : "n大";    n = 10;    String maxString1 = (m &gt; n)? "m大" : ((m == n)? "m和n相等" : "n大");    System.out.println(maxString);    System.out.println(maxString1);    //练习：获取三个数的最大值    int a = 10;    int b = 43;    int c = 5;    int max1 = (a &gt; b)? a : b;    int max2 = (max1 &gt; c)? max1 : c;//不建议： int max2 = (((a &gt; b)? a : b) &gt; c)? ((a &gt; b)? a : b) : c;    System.out.println(max2);  }}</code></pre><p>说明：大家了解即可。不需要记忆！</p><p><img src="file:///Users/mymac/Desktop/Java/2_%E6%AF%8F%E6%97%A5%E7%AC%94%E8%AE%B0/assets/1592970826425.png?lastModify=1593667778" alt="1592970826425"></p><h3 id="4-运算符的优先级"><a href="#4-运算符的优先级" class="headerlink" title="4. 运算符的优先级"></a>4. 运算符的优先级</h3><ul><li><p>代码演示</p></li><li><p>说明</p></li></ul><h3 id="3-三元运算符"><a href="#3-三元运算符" class="headerlink" title="3. 三元运算符"></a>3. 三元运算符</h3><ul><li>代码演示</li></ul><p><img src="file:///Users/mymac/Desktop/Java/2_%E6%AF%8F%E6%97%A5%E7%AC%94%E8%AE%B0/assets/1592970743950.png?lastModify=1593667778" alt="1592970743950"></p><p><img src="file:///Users/mymac/Desktop/Java/2_%E6%AF%8F%E6%97%A5%E7%AC%94%E8%AE%B0/assets/1592970731082.png?lastModify=1593667778" alt="1592970731082"></p><p><img src="file:///Users/mymac/Desktop/Java/2_%E6%AF%8F%E6%97%A5%E7%AC%94%E8%AE%B0/assets/1592970714047.png?lastModify=1593667778" alt="1592970714047"></p><ul><li><p>举例</p></li><li><p>说明</p></li></ul><h3 id="2-位运算符"><a href="#2-位运算符" class="headerlink" title="2. 位运算符"></a>2. 位运算符</h3><ul><li>代码演示</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
